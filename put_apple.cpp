//递归算法放苹果
#include<iostream>
using namespace std;

int func(int a,int p)
{
	if(a<p)  //当盘子大于苹果时，由于不区别盘子，所以至少有p-a个空盘子
	{
		return func(a,a);
	}
	if(a==0)   //不可能有空盘子，每个盘子一个苹果，终止递归
	{
		return 1;    
	}
	if(p==1)   //最后只有若干苹果放在一个盘子上，终止递归
	{
		return 1;
	}
	return func(a,p-1)+func(a-p,p);   //总得放法=有盘子剩的+没盘子剩的
}  

void main()
{
	int a,p;
	cin >> a >> p;
	cout << func(a,p) << endl;
}

//利用递归，而且分类处理，一步一步把计算规模缩小。
//递归就是函数自己调用自身，在适当条件终止递归，并返回一个值
//递归可以是一种循环，用于一种不确定大小的循环，直至循环到某个值，终止递归，此法用于不确定的遍历
//递归可以将一个复杂的大问题降维处理，小问题的处理方法和大问题的处理一样，只是规模更小了，知道规模小到能够轻易得出返回值
//问题分解